import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from pymongo import MongoClient
from urllib.parse import quote_plus


keywords = [
  # Nh√≥m: Qu√°n nh·∫≠u, bia, r∆∞·ª£u
  "qu√°n nh·∫≠u", "qu√°n bia", "nh√† h√†ng bia", "qu√°n r∆∞·ª£u", "beer club", "pub",
  "qu√°n n∆∞·ªõng bia", "qu√°n nh·∫≠u b√¨nh d√¢n", "nh√† h√†ng c√≥ ph·ª•c v·ª• bia",
  "qu√°n ƒÉn c√≥ bia", "qu√°n nh·∫≠u ngo√†i tr·ªùi", "qu√°n nh·∫≠u h·∫£i s·∫£n", "l·∫©u bia",
  "nh·∫≠u b√¨nh d√¢n", "qu√°n nh·∫≠u s√¢n v∆∞·ªùn", "qu√°n nh·∫≠u gi√° r·∫ª",
  "qu√°n nh·∫≠u sinh vi√™n", "qu√°n nh·∫≠u m·ªü khuya", "qu√°n nh·∫≠u v·ªâa h√®",
  "qu√°n nh·∫≠u ƒë·∫∑c s·∫£n",

  # Nh√≥m: Karaoke - Gi·∫£i tr√≠
  "karaoke", "karaoke ktv", "karaoke gia ƒë√¨nh", "karaoke vip",
  "karaoke b√¨nh d√¢n", "karaoke c√≥ ph·ª•c v·ª• ƒë·ªì ƒÉn", "karaoke ph√≤ng l·ªõn",

  # Nh√≥m: Qu√°n n∆∞·ªõng - L·∫©u - Nh√† h√†ng
  "qu√°n n∆∞·ªõng", "qu√°n l·∫©u n∆∞·ªõng", "l·∫©u n∆∞·ªõng ngo√†i tr·ªùi", "nh√† h√†ng h·∫£i s·∫£n",
  "qu√°n n∆∞·ªõng H√†n Qu·ªëc", "BBQ", "buffet n∆∞·ªõng", "buffet l·∫©u",
  "qu√°n ƒÉn gia ƒë√¨nh", "qu√°n ƒÉn ƒë√™m", "qu√°n ƒÉn ngon",

  # Nh√≥m: Nh√† h√†ng ti·ªác c∆∞·ªõi - S·ª± ki·ªán
  "nh√† h√†ng ti·ªác c∆∞·ªõi", "nh√† h√†ng ti·ªác c∆∞·ªõi b√¨nh d√¢n", "nh√† h√†ng ti·ªác",
  "trung t√¢m ti·ªác c∆∞·ªõi", "nh√† h√†ng t·ªï ch·ª©c s·ª± ki·ªán", "ti·ªác c∆∞·ªõi ngo√†i tr·ªùi",
  "nh√† h√†ng sang tr·ªçng", "d·ªãch v·ª• c∆∞·ªõi h·ªèi",

  # Nh√≥m: Bar - R∆∞·ª£u - Bia ƒë·∫∑c bi·ªát
  "bar", "lounge", "qu√°n bia h∆°i", "qu√°n bia t∆∞∆°i", "qu√°n bia ƒê·ª©c",
  "craft beer", "wine bar", "qu√°n r∆∞·ª£u vang"
]

#config
MONGO_URI = ""
DB_NAME = "crawl_restaurant_drink_beer"
LOCATION_COLLECTION_NAME = "location"
RESTAURANT_COLLECTION_NAME = "restaurant_drink_beer"

# H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu v·ªã tr√≠ t·ª´ MongoDB
def fetch_data_from_mongodb():
    """
    K·∫øt n·ªëi ƒë·∫øn MongoDB v√† l·∫•y danh s√°ch c√°c v·ªã tr√≠.
    N·∫øu ch∆∞a c√≥ c∆° s·ªü d·ªØ li·ªáu, h√†m n√†y s·∫Ω tr·∫£ v·ªÅ m·ªôt danh s√°ch m·∫´u.
    """
    try:
        client = MongoClient(MONGO_URI)
        db = client[DB_NAME]
        collection = db[LOCATION_COLLECTION_NAME]
        data = list(collection.find({}))
        client.close()
        if not data:
            print("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu v·ªã tr√≠ trong MongoDB. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.")
            # D·ªØ li·ªáu m·∫´u n·∫øu b·∫°n ch∆∞a c√≥ MongoDB
            return [
                {"ward": "Ph∆∞·ªùng B·∫øn Ngh√©", "district": "Qu·∫≠n 1", "city": "H·ªì Ch√≠ Minh"},
                {"ward": "Ph∆∞·ªùng Th·∫£o ƒêi·ªÅn", "district": "Qu·∫≠n 2", "city": "H·ªì Ch√≠ Minh"}
            ]
        return data
    except Exception as e:
        print(f"L·ªói khi k·∫øt n·ªëi MongoDB: {e}. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.")
        # D·ªØ li·ªáu m·∫´u n·∫øu b·∫°n ch∆∞a c√≥ MongoDB
        return [
            {"ward": "Ph∆∞·ªùng B·∫øn Ngh√©", "district": "Qu·∫≠n 1", "city": "H·ªì Ch√≠ Minh"},
            {"ward": "Ph∆∞·ªùng Th·∫£o ƒêi·ªÅn", "district": "Qu·∫≠n 2", "city": "H·ªì Ch√≠ Minh"}
        ]

# H√†m ƒë·ªÉ x√≥a m·ªôt v·ªã tr√≠ sau khi ƒë√£ c√†o d·ªØ li·ªáu xong
def delete_location(location_id):
    """X√≥a m·ªôt t√†i li·ªáu v·ªã tr√≠ kh·ªèi MongoDB b·∫±ng ID c·ªßa n√≥."""
    try:
        client = MongoClient(MONGO_URI)
        db = client[DB_NAME]
        collection = db[LOCATION_COLLECTION_NAME]
        result = collection.delete_one({"_id": location_id})
        client.close()
        return result
    except Exception as e:
        print(f"L·ªói khi x√≥a v·ªã tr√≠: {e}")
        return None

# H√†m ch√≠nh ƒë·ªÉ c√†o d·ªØ li·ªáu
def crawl_restaurant_drink_beer(key, loc):
    """
    C√†o d·ªØ li·ªáu c√°c nh√† h√†ng t·ª´ Google Maps cho m·ªôt t·ª´ kh√≥a v√† v·ªã tr√≠ c·ª• th·ªÉ.
    """
    # Thi·∫øt l·∫≠p tr√¨nh duy·ªát Chrome
    service = Service(ChromeDriverManager().install())
    options = webdriver.ChromeOptions()
    # options.add_argument("--headless")  # B·ªè comment d√≤ng n√†y ƒë·ªÉ ch·∫°y ·ªü ch·∫ø ƒë·ªô kh√¥ng giao di·ªán
    driver = webdriver.Chrome(service=service, options=options)

    query = f"{key} {loc.get('ward', '')} {loc.get('district', '')}"
    url = f"https://www.google.com/maps/search/{quote_plus(query)}"
    
    driver.get(url)

    try:
        # ƒê·ª£i cho ƒë·∫øn khi v√πng ch·ª©a k·∫øt qu·∫£ ƒë∆∞·ª£c t·∫£i
        wait = WebDriverWait(driver, 10)
        feed_div = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'div[role="feed"]')))
        
        print("üó∫Ô∏è ƒêang t·∫£i danh s√°ch ƒë·ªãa ƒëi·ªÉm...")
        time.sleep(2)

        # Cu·ªôn xu·ªëng ƒë·ªÉ t·∫£i th√™m k·∫øt qu·∫£
        for i in range(10):
            print(f"üîÑ Cu·ªôn l·∫ßn {i+1}...")
            driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", feed_div)
            time.sleep(2)

        print("üîç ƒêang thu th·∫≠p d·ªØ li·ªáu...")
        divs = driver.find_elements(By.CSS_SELECTOR, "div.Nv2PK")
        
        results = []
        for div in divs:
            try:
                a_tag = div.find_element(By.CSS_SELECTOR, "a.hfpxzc")
                name = a_tag.get_attribute("aria-label")
                link = a_tag.get_attribute("href")

                # L·∫•y th√¥ng tin chi ti·∫øt kh√°c
                details_elements = div.find_elements(By.CSS_SELECTOR, ".W4Efsd span")
                details_text = [elem.text for elem in details_elements if elem.text]
                
                # X·ª≠ l√Ω c√°c th√¥ng tin tr√≠ch xu·∫•t
                rating_reviews = details_text[0] if details_text else ""
                rating = rating_reviews.split(" ")[0] if rating_reviews else None
                
                category = details_text[1] if len(details_text) > 1 else None
                address = details_text[2] if len(details_text) > 2 else None
                opening_hours = details_text[3] if len(details_text) > 3 else None

                img = div.find_element(By.TAG_NAME, "img").get_attribute("src") if div.find_elements(By.TAG_NAME, "img") else None

                results.append({
                    "name": name,
                    "link": link,
                    "rating": rating,
                    "category": category,
                    "address": address,
                    "openingHours": opening_hours,
                    "img": img,
                    "ward": loc.get('ward'),
                    "district": loc.get('district'),
                    "city": loc.get('city')
                })
            except Exception as e:
                print(f"L·ªói khi tr√≠ch xu·∫•t m·ªôt ƒë·ªãa ƒëi·ªÉm: {e}")

        # L∆∞u v√†o MongoDB
        if results:
            try:
                client = MongoClient(MONGO_URI)
                db = client[DB_NAME]
                collection = db[RESTAURANT_COLLECTION_NAME]
                collection.insert_many(results)
                print(
                    f"‚úÖ ƒê√£ l∆∞u {len(results)} ƒë·ªãa ƒëi·ªÉm cho t·ª´ kh√≥a \"{key}\" t·∫°i {loc.get('ward', '')}, {loc.get('district', '')}"
                )
            except Exception as e:
                print(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o MongoDB: {e}")
            finally:
                client.close()
        
        # T√πy ch·ªçn: L∆∞u v√†o file JSON n·∫øu kh√¥ng c√≥ DB
        with open(f"results_{key}_{loc.get('district', '')}.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=4)

    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c√†o d·ªØ li·ªáu: {e}")
    finally:
        driver.quit()

def main():
    """
    H√†m ch√≠nh ƒë·ªÉ ƒëi·ªÅu ph·ªëi qu√° tr√¨nh c√†o d·ªØ li·ªáu.
    """
    locations = fetch_data_from_mongodb()
    if not locations:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu v·ªã tr√≠ ƒë·ªÉ x·ª≠ l√Ω.")
        return

    for loc in locations:
        for key in keywords:
            print(
                f"üöÄ B·∫Øt ƒë·∫ßu c√†o d·ªØ li·ªáu cho: {key} t·∫°i {loc.get('ward', '')}, {loc.get('district', '')}"
            )
            try:
                crawl_restaurant_drink_beer(key, loc)
            except Exception as e:
                print(f"L·ªói khi c√†o d·ªØ li·ªáu cho: {key} t·∫°i {loc.get('ward', '')}, {loc.get('district', '')}")
                print(e)
 
        # if loc.get('_id'):
        #     delete_location(loc['_id'])
        #     print(f" ƒê√£ x√≥a ƒë·ªãa ƒëi·ªÉm: {loc.get('ward')}")

if __name__ == "__main__":
    main()